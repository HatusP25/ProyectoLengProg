
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ALIAS AND ARREGLO ARROBA BEGIN BOOLEANO BREAK CASE CLASS COMA COMILLASDOBLE COMILLASIMPLE COMPARACION DARROBA DEF DIVIDE DO DOLAR ELSE ELSIF END ENSURE FALSE FHASH FICHERO FOR GUIONBAJO HASKEY ID IF IGUAL IN INTERROGACION KEY LBRACKET LENGTH LLLAVE LPAREN MINUS MODULE NEXT NIL NOT NUMBER OR PLUS PUNTO PUTS RBRACKET REDO RESCUE RETRY RETURN RLLAVE RPAREN SELF STRING SUPER THEN TIMES TRUE UNDEF UNLES UNTIL VALUES VARIABLE WHEN WHILE YIELDsentencias : estructurasControl\n                | declaracion\n                | estructurasControl sentencias\n                | declaracion sentencias\n                | declaracion_funcion\n                | declaracion_funcion sentencias\n                | funcioneshash\n                estructurasControl : estrucIf\n                            | estrucWhile\n                            | sentenciafor\n                            operadorMat : IGUAL\n                | PLUS\n                | MINUS\n                | TIMES\n                operadorLog : AND\n                 | OR\n                estrucIf : IF logica cuerpo END\n                | IF logica cuerpo estrucElse\n                logica : condicion\n                | condicion operadorLog  logica\n                condicion : comparador COMPARACION comparador\n                    | boolean\n                    comparador : VARIABLE\n                    | primitivo\n                    estrucElse : ELSE cuerpo END\n                    | ELSE logica cuerpo END\n                     estrucWhile : WHILE logica cuerpo END\n                    cuerpo : declaracion\n                | declaracion cuerpo\n                | imprimir\n                | imprimir cuerpo\n                | estructurasControl\n                | estructurasControl cuerpo\n                | cuerpo RETURN retornos\n                retornos : VARIABLE\n                | primitivo\n                | expresion\n                | asignacion\n                declaracion : VARIABLE IGUAL asignacion\n                    | VARIABLE IGUAL asignacion declaracion\n                    | VARIABLE IGUAL hashf\n                    | VARIABLE IGUAL hashf declaracion\n                    | VARIABLE operadorMat IGUAL opcion\n                    | VARIABLE operadorMat IGUAL opcion declaracion\n                    opcion : VARIABLE\n                | NUMBER\n                declaracion_funcion : DEF VARIABLE LPAREN params RPAREN cuerpo ENDparams : rubyParams\n               | rubyParams COMA params\n                  sentenciafor : FOR VARIABLE IN LPAREN NUMBER PUNTO PUNTO NUMBER RPAREN cuerpo ENDimprimir : PUTS STRING\n                | PUTS VARIABLE\n    rubyParams : VARIABLE\n                    | boolean\n                    | NUMBERasignacion : NUMBER\n                    | boolean\n                    contenidohash : elemento\n                    | elemento COMA contenidohashhashf : LLLAVE contenidohash RLLAVEelemento : clave FHASH valueasignacion : ARREGLOasignacion : FICHEROasignacion : expresionasignacion : STRINGexpresion : NUMBER PLUS NUMBERexpresion : NUMBER MINUS NUMBERexpresion : terminotermino : termino TIMES factortermino : termino DIVIDE factortermino : factorfactor : NUMBERfactor : LPAREN expresion RPARENprimitivo : NUMBER PUNTO NUMBERprimitivo : NUMBERprimitivo : booleanboolean : TRUE\n             | FALSE\n        funcioneshash : hlength\n                    | haskey\n                    | hkeys\n                    | hvalues\n                    hlength : hashf PUNTO LENGTH LPAREN  RPARENhaskey : hashf HASKEY INTERROGACION LPAREN clave RPARENhkeys : hashf PUNTO KEYhvalues : hashf PUNTO VALUESclave : STRING\n            | VARIABLE\n            | NUMBER\n            | NUMBER PUNTO NUMBERvalue : NUMBER\n            | VARIABLE\n             | STRING\n             | boolean\n             | NUMBER PUNTO NUMBER'
    
_lr_action_items = {'VARIABLE':([0,2,3,4,6,7,8,11,16,17,18,19,31,32,34,35,36,37,38,39,40,48,49,50,51,52,53,54,55,56,57,59,64,66,67,68,69,70,71,72,73,77,78,79,81,82,89,90,91,93,99,100,101,102,106,107,108,109,110,111,112,121,122,123,124,125,126,127,130,131,140,147,151,152,155,157,],[9,9,9,9,-8,-9,-10,30,35,35,41,46,9,-19,-22,-23,-24,-77,-78,-75,9,9,9,-56,-57,-62,-63,-64,-65,-68,-71,89,94,9,9,9,107,35,-15,-16,35,-60,46,117,-40,-42,-45,9,-46,46,-17,-18,133,141,-51,-52,-20,-21,-76,-74,-27,-66,-67,-69,-72,-70,-73,-44,9,94,9,-25,-47,-26,9,-50,]),'DEF':([0,2,3,4,6,7,8,37,38,48,49,50,51,52,53,54,55,56,57,77,81,82,89,90,91,99,100,112,121,122,123,124,125,126,127,147,151,152,157,],[11,11,11,11,-8,-9,-10,-77,-78,-39,-41,-56,-57,-62,-63,-64,-65,-68,-71,-60,-40,-42,-45,-43,-46,-17,-18,-27,-66,-67,-69,-72,-70,-73,-44,-25,-47,-26,-50,]),'IF':([0,2,3,4,6,7,8,31,32,34,35,36,37,38,39,40,48,49,50,51,52,53,54,55,56,57,66,67,68,77,81,82,89,90,91,99,100,102,106,107,108,109,110,111,112,121,122,123,124,125,126,127,130,140,147,151,152,155,157,],[16,16,16,16,-8,-9,-10,16,-19,-22,-23,-24,-77,-78,-75,16,-39,-41,-56,-57,-62,-63,-64,-65,-68,-71,16,16,16,-60,-40,-42,-45,-43,-46,-17,-18,16,-51,-52,-20,-21,-76,-74,-27,-66,-67,-69,-72,-70,-73,-44,16,16,-25,-47,-26,16,-50,]),'WHILE':([0,2,3,4,6,7,8,31,32,34,35,36,37,38,39,40,48,49,50,51,52,53,54,55,56,57,66,67,68,77,81,82,89,90,91,99,100,102,106,107,108,109,110,111,112,121,122,123,124,125,126,127,130,140,147,151,152,155,157,],[17,17,17,17,-8,-9,-10,17,-19,-22,-23,-24,-77,-78,-75,17,-39,-41,-56,-57,-62,-63,-64,-65,-68,-71,17,17,17,-60,-40,-42,-45,-43,-46,-17,-18,17,-51,-52,-20,-21,-76,-74,-27,-66,-67,-69,-72,-70,-73,-44,17,17,-25,-47,-26,17,-50,]),'FOR':([0,2,3,4,6,7,8,31,32,34,35,36,37,38,39,40,48,49,50,51,52,53,54,55,56,57,66,67,68,77,81,82,89,90,91,99,100,102,106,107,108,109,110,111,112,121,122,123,124,125,126,127,130,140,147,151,152,155,157,],[18,18,18,18,-8,-9,-10,18,-19,-22,-23,-24,-77,-78,-75,18,-39,-41,-56,-57,-62,-63,-64,-65,-68,-71,18,18,18,-60,-40,-42,-45,-43,-46,-17,-18,18,-51,-52,-20,-21,-76,-74,-27,-66,-67,-69,-72,-70,-73,-44,18,18,-25,-47,-26,18,-50,]),'LLLAVE':([0,2,3,4,6,7,8,23,37,38,48,49,50,51,52,53,54,55,56,57,77,81,82,89,90,91,99,100,112,121,122,123,124,125,126,127,147,151,152,157,],[19,19,19,19,-8,-9,-10,19,-77,-78,-39,-41,-56,-57,-62,-63,-64,-65,-68,-71,-60,-40,-42,-45,-43,-46,-17,-18,-27,-66,-67,-69,-72,-70,-73,-44,-25,-47,-26,-50,]),'$end':([1,2,3,4,5,6,7,8,12,13,14,15,20,21,22,37,38,48,49,50,51,52,53,54,55,56,57,61,62,77,81,82,89,90,91,99,100,112,121,122,123,124,125,126,127,128,144,147,151,152,157,],[0,-1,-2,-5,-7,-8,-9,-10,-79,-80,-81,-82,-3,-4,-6,-77,-78,-39,-41,-56,-57,-62,-63,-64,-65,-68,-71,-85,-86,-60,-40,-42,-45,-43,-46,-17,-18,-27,-66,-67,-69,-72,-70,-73,-44,-83,-84,-25,-47,-26,-50,]),'PUTS':([6,7,8,31,32,34,35,36,37,38,39,40,48,49,50,51,52,53,54,55,56,57,66,67,68,77,81,82,89,90,91,99,100,102,106,107,108,109,110,111,112,121,122,123,124,125,126,127,130,140,147,152,155,157,],[-8,-9,-10,69,-19,-22,-23,-24,-77,-78,-75,69,-39,-41,-56,-57,-62,-63,-64,-65,-68,-71,69,69,69,-60,-40,-42,-45,-43,-46,-17,-18,69,-51,-52,-20,-21,-76,-74,-27,-66,-67,-69,-72,-70,-73,-44,69,69,-25,-26,69,-50,]),'END':([6,7,8,37,38,48,49,50,51,52,53,54,55,56,57,65,66,67,68,75,77,81,82,89,90,91,99,100,103,104,105,106,107,111,112,121,122,123,124,125,126,127,132,133,134,135,136,137,138,139,145,147,148,152,156,157,],[-8,-9,-10,-77,-78,-39,-41,-56,-57,-62,-63,-64,-65,-68,-71,99,-28,-30,-32,112,-60,-40,-42,-45,-43,-46,-17,-18,-29,-31,-33,-51,-52,-74,-27,-66,-67,-69,-72,-70,-73,-44,-34,-35,-36,-37,-38,-56,-57,147,151,-25,152,-26,157,-50,]),'RETURN':([6,7,8,37,38,48,49,50,51,52,53,54,55,56,57,65,66,67,68,75,77,81,82,89,90,91,99,100,103,104,105,106,107,111,112,121,122,123,124,125,126,127,132,133,134,135,136,137,138,139,145,147,148,152,156,157,],[-8,-9,-10,-77,-78,-39,-41,-56,-57,-62,-63,-64,-65,-68,-71,101,-28,-30,-32,101,-60,-40,-42,-45,-43,-46,-17,-18,101,101,101,-51,-52,-74,-27,-66,-67,-69,-72,-70,-73,-44,-34,-35,-36,-37,-38,-56,-57,101,101,-25,101,-26,101,-50,]),'ELSE':([6,7,8,37,38,48,49,50,51,52,53,54,55,56,57,65,66,67,68,77,81,82,89,90,91,99,100,103,104,105,106,107,111,112,121,122,123,124,125,126,127,132,133,134,135,136,137,138,147,152,157,],[-8,-9,-10,-77,-78,-39,-41,-56,-57,-62,-63,-64,-65,-68,-71,102,-28,-30,-32,-60,-40,-42,-45,-43,-46,-17,-18,-29,-31,-33,-51,-52,-74,-27,-66,-67,-69,-72,-70,-73,-44,-34,-35,-36,-37,-38,-56,-57,-25,-26,-50,]),'IGUAL':([9,23,24,25,26,27,141,],[23,-11,59,-12,-13,-14,23,]),'PLUS':([9,50,88,137,141,],[25,83,83,83,25,]),'MINUS':([9,50,88,137,141,],[26,84,84,84,26,]),'TIMES':([9,50,56,57,88,123,124,125,126,137,141,],[27,-72,85,-71,-72,-69,-72,-70,-73,-72,27,]),'PUNTO':([10,39,47,77,116,137,142,149,],[28,74,80,-60,143,74,149,153,]),'HASKEY':([10,77,],[29,-60,]),'TRUE':([16,17,23,64,70,71,72,73,79,101,102,131,],[37,37,37,37,37,-15,-16,37,37,37,37,37,]),'FALSE':([16,17,23,64,70,71,72,73,79,101,102,131,],[38,38,38,38,38,-15,-16,38,38,38,38,38,]),'NUMBER':([16,17,19,23,58,59,64,70,71,72,73,74,78,79,80,83,84,85,86,93,101,102,113,131,143,153,],[39,39,47,50,88,91,98,39,-15,-16,39,111,47,116,120,121,122,124,124,47,137,39,142,98,150,154,]),'STRING':([19,23,69,78,79,93,101,],[45,55,106,45,118,45,55,]),'ARREGLO':([23,101,],[52,52,]),'FICHERO':([23,101,],[53,53,]),'LPAREN':([23,30,58,60,63,76,85,86,101,],[58,64,58,92,93,113,58,58,58,]),'LENGTH':([28,],[60,]),'KEY':([28,],[61,]),'VALUES':([28,],[62,]),'INTERROGACION':([29,],[63,]),'AND':([32,34,35,36,37,38,39,109,110,111,],[71,-22,-23,-24,-77,-78,-75,-21,-76,-74,]),'OR':([32,34,35,36,37,38,39,109,110,111,],[72,-22,-23,-24,-77,-78,-75,-21,-76,-74,]),'COMPARACION':([33,34,35,36,37,38,39,111,141,],[73,-76,-23,-24,-77,-78,-75,-74,-23,]),'COMA':([37,38,43,94,96,97,98,115,116,117,118,119,150,],[-77,-78,78,-53,131,-54,-55,-61,-91,-92,-93,-94,-95,]),'RPAREN':([37,38,45,46,47,56,57,87,88,92,94,95,96,97,98,120,121,122,123,124,125,126,129,146,154,],[-77,-78,-87,-88,-89,-68,-71,126,-72,128,-53,130,-48,-54,-55,-90,-66,-67,-69,-72,-70,-73,144,-49,155,]),'RLLAVE':([37,38,42,43,114,115,116,117,118,119,150,],[-77,-78,77,-58,-59,-61,-91,-92,-93,-94,-95,]),'IN':([41,],[76,]),'FHASH':([44,45,46,47,120,],[79,-87,-88,-89,-90,]),'DIVIDE':([50,56,57,88,123,124,125,126,137,],[-72,86,-71,-72,-69,-72,-70,-73,-72,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'sentencias':([0,2,3,4,],[1,20,21,22,]),'estructurasControl':([0,2,3,4,31,40,66,67,68,102,130,140,155,],[2,2,2,2,68,68,68,68,68,68,68,68,68,]),'declaracion':([0,2,3,4,31,40,48,49,66,67,68,90,102,130,140,155,],[3,3,3,3,66,66,81,82,66,66,66,127,66,66,66,66,]),'declaracion_funcion':([0,2,3,4,],[4,4,4,4,]),'funcioneshash':([0,2,3,4,],[5,5,5,5,]),'estrucIf':([0,2,3,4,31,40,66,67,68,102,130,140,155,],[6,6,6,6,6,6,6,6,6,6,6,6,6,]),'estrucWhile':([0,2,3,4,31,40,66,67,68,102,130,140,155,],[7,7,7,7,7,7,7,7,7,7,7,7,7,]),'sentenciafor':([0,2,3,4,31,40,66,67,68,102,130,140,155,],[8,8,8,8,8,8,8,8,8,8,8,8,8,]),'hashf':([0,2,3,4,23,],[10,10,10,10,49,]),'hlength':([0,2,3,4,],[12,12,12,12,]),'haskey':([0,2,3,4,],[13,13,13,13,]),'hkeys':([0,2,3,4,],[14,14,14,14,]),'hvalues':([0,2,3,4,],[15,15,15,15,]),'operadorMat':([9,141,],[24,24,]),'logica':([16,17,70,102,],[31,40,108,140,]),'condicion':([16,17,70,102,],[32,32,32,32,]),'comparador':([16,17,70,73,102,],[33,33,33,109,33,]),'boolean':([16,17,23,64,70,73,79,101,102,131,],[34,34,51,97,34,110,119,138,34,97,]),'primitivo':([16,17,70,73,101,102,],[36,36,36,36,134,36,]),'contenidohash':([19,78,],[42,114,]),'elemento':([19,78,],[43,43,]),'clave':([19,78,93,],[44,44,129,]),'asignacion':([23,101,],[48,136,]),'expresion':([23,58,101,],[54,87,135,]),'termino':([23,58,101,],[56,56,56,]),'factor':([23,58,85,86,101,],[57,57,123,125,57,]),'cuerpo':([31,40,66,67,68,102,130,140,155,],[65,75,103,104,105,139,145,148,156,]),'imprimir':([31,40,66,67,68,102,130,140,155,],[67,67,67,67,67,67,67,67,67,]),'operadorLog':([32,],[70,]),'opcion':([59,],[90,]),'params':([64,131,],[95,146,]),'rubyParams':([64,131,],[96,96,]),'estrucElse':([65,],[100,]),'value':([79,],[115,]),'retornos':([101,],[132,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> sentencias","S'",1,None,None,None),
  ('sentencias -> estructurasControl','sentencias',1,'p_sentecias','sintactico.py',10),
  ('sentencias -> declaracion','sentencias',1,'p_sentecias','sintactico.py',11),
  ('sentencias -> estructurasControl sentencias','sentencias',2,'p_sentecias','sintactico.py',12),
  ('sentencias -> declaracion sentencias','sentencias',2,'p_sentecias','sintactico.py',13),
  ('sentencias -> declaracion_funcion','sentencias',1,'p_sentecias','sintactico.py',14),
  ('sentencias -> declaracion_funcion sentencias','sentencias',2,'p_sentecias','sintactico.py',15),
  ('sentencias -> funcioneshash','sentencias',1,'p_sentecias','sintactico.py',16),
  ('estructurasControl -> estrucIf','estructurasControl',1,'p_estructurasControl','sintactico.py',22),
  ('estructurasControl -> estrucWhile','estructurasControl',1,'p_estructurasControl','sintactico.py',23),
  ('estructurasControl -> sentenciafor','estructurasControl',1,'p_estructurasControl','sintactico.py',24),
  ('operadorMat -> IGUAL','operadorMat',1,'p_operadorMat','sintactico.py',30),
  ('operadorMat -> PLUS','operadorMat',1,'p_operadorMat','sintactico.py',31),
  ('operadorMat -> MINUS','operadorMat',1,'p_operadorMat','sintactico.py',32),
  ('operadorMat -> TIMES','operadorMat',1,'p_operadorMat','sintactico.py',33),
  ('operadorLog -> AND','operadorLog',1,'p_operadorLog','sintactico.py',39),
  ('operadorLog -> OR','operadorLog',1,'p_operadorLog','sintactico.py',40),
  ('estrucIf -> IF logica cuerpo END','estrucIf',4,'p_estrucIf','sintactico.py',46),
  ('estrucIf -> IF logica cuerpo estrucElse','estrucIf',4,'p_estrucIf','sintactico.py',47),
  ('logica -> condicion','logica',1,'p_logica','sintactico.py',54),
  ('logica -> condicion operadorLog logica','logica',3,'p_logica','sintactico.py',55),
  ('condicion -> comparador COMPARACION comparador','condicion',3,'p_condicion','sintactico.py',61),
  ('condicion -> boolean','condicion',1,'p_condicion','sintactico.py',62),
  ('comparador -> VARIABLE','comparador',1,'p_comparador','sintactico.py',68),
  ('comparador -> primitivo','comparador',1,'p_comparador','sintactico.py',69),
  ('estrucElse -> ELSE cuerpo END','estrucElse',3,'p_estrucElse','sintactico.py',75),
  ('estrucElse -> ELSE logica cuerpo END','estrucElse',4,'p_estrucElse','sintactico.py',76),
  ('estrucWhile -> WHILE logica cuerpo END','estrucWhile',4,'p_estrucWhile','sintactico.py',84),
  ('cuerpo -> declaracion','cuerpo',1,'p_cuerpo','sintactico.py',91),
  ('cuerpo -> declaracion cuerpo','cuerpo',2,'p_cuerpo','sintactico.py',92),
  ('cuerpo -> imprimir','cuerpo',1,'p_cuerpo','sintactico.py',93),
  ('cuerpo -> imprimir cuerpo','cuerpo',2,'p_cuerpo','sintactico.py',94),
  ('cuerpo -> estructurasControl','cuerpo',1,'p_cuerpo','sintactico.py',95),
  ('cuerpo -> estructurasControl cuerpo','cuerpo',2,'p_cuerpo','sintactico.py',96),
  ('cuerpo -> cuerpo RETURN retornos','cuerpo',3,'p_cuerpo','sintactico.py',97),
  ('retornos -> VARIABLE','retornos',1,'p_retornos','sintactico.py',103),
  ('retornos -> primitivo','retornos',1,'p_retornos','sintactico.py',104),
  ('retornos -> expresion','retornos',1,'p_retornos','sintactico.py',105),
  ('retornos -> asignacion','retornos',1,'p_retornos','sintactico.py',106),
  ('declaracion -> VARIABLE IGUAL asignacion','declaracion',3,'p_declaracion','sintactico.py',112),
  ('declaracion -> VARIABLE IGUAL asignacion declaracion','declaracion',4,'p_declaracion','sintactico.py',113),
  ('declaracion -> VARIABLE IGUAL hashf','declaracion',3,'p_declaracion','sintactico.py',114),
  ('declaracion -> VARIABLE IGUAL hashf declaracion','declaracion',4,'p_declaracion','sintactico.py',115),
  ('declaracion -> VARIABLE operadorMat IGUAL opcion','declaracion',4,'p_declaracion','sintactico.py',116),
  ('declaracion -> VARIABLE operadorMat IGUAL opcion declaracion','declaracion',5,'p_declaracion','sintactico.py',117),
  ('opcion -> VARIABLE','opcion',1,'p_opcion','sintactico.py',124),
  ('opcion -> NUMBER','opcion',1,'p_opcion','sintactico.py',125),
  ('declaracion_funcion -> DEF VARIABLE LPAREN params RPAREN cuerpo END','declaracion_funcion',7,'p_declaracion_funcion','sintactico.py',131),
  ('params -> rubyParams','params',1,'p_params','sintactico.py',136),
  ('params -> rubyParams COMA params','params',3,'p_params','sintactico.py',137),
  ('sentenciafor -> FOR VARIABLE IN LPAREN NUMBER PUNTO PUNTO NUMBER RPAREN cuerpo END','sentenciafor',11,'p_sentenciafor','sintactico.py',144),
  ('imprimir -> PUTS STRING','imprimir',2,'p_imprimir','sintactico.py',150),
  ('imprimir -> PUTS VARIABLE','imprimir',2,'p_imprimir','sintactico.py',151),
  ('rubyParams -> VARIABLE','rubyParams',1,'p_rubyParams','sintactico.py',159),
  ('rubyParams -> boolean','rubyParams',1,'p_rubyParams','sintactico.py',160),
  ('rubyParams -> NUMBER','rubyParams',1,'p_rubyParams','sintactico.py',161),
  ('asignacion -> NUMBER','asignacion',1,'p_asignacion_primitivo','sintactico.py',166),
  ('asignacion -> boolean','asignacion',1,'p_asignacion_primitivo','sintactico.py',167),
  ('contenidohash -> elemento','contenidohash',1,'p_contenidohash','sintactico.py',172),
  ('contenidohash -> elemento COMA contenidohash','contenidohash',3,'p_contenidohash','sintactico.py',173),
  ('hashf -> LLLAVE contenidohash RLLAVE','hashf',3,'p_hashf','sintactico.py',177),
  ('elemento -> clave FHASH value','elemento',3,'p_elemento','sintactico.py',183),
  ('asignacion -> ARREGLO','asignacion',1,'p_asignacion_arreglo','sintactico.py',189),
  ('asignacion -> FICHERO','asignacion',1,'p_asignacion_fichero','sintactico.py',195),
  ('asignacion -> expresion','asignacion',1,'p_asignacion_expresion','sintactico.py',203),
  ('asignacion -> STRING','asignacion',1,'p_asignacion_string','sintactico.py',209),
  ('expresion -> NUMBER PLUS NUMBER','expresion',3,'p_expresion_suma','sintactico.py',215),
  ('expresion -> NUMBER MINUS NUMBER','expresion',3,'p_expresion_resta','sintactico.py',221),
  ('expresion -> termino','expresion',1,'p_expresion_term','sintactico.py',227),
  ('termino -> termino TIMES factor','termino',3,'p_termino_multi','sintactico.py',233),
  ('termino -> termino DIVIDE factor','termino',3,'p_termino_div','sintactico.py',239),
  ('termino -> factor','termino',1,'p_termino_factor','sintactico.py',245),
  ('factor -> NUMBER','factor',1,'p_factor_number','sintactico.py',251),
  ('factor -> LPAREN expresion RPAREN','factor',3,'p_factor_expresion','sintactico.py',257),
  ('primitivo -> NUMBER PUNTO NUMBER','primitivo',3,'p_primitivo_flotante','sintactico.py',263),
  ('primitivo -> NUMBER','primitivo',1,'p_primitivo_number','sintactico.py',269),
  ('primitivo -> boolean','primitivo',1,'p_primitivo_booleano','sintactico.py',275),
  ('boolean -> TRUE','boolean',1,'p_boolean','sintactico.py',281),
  ('boolean -> FALSE','boolean',1,'p_boolean','sintactico.py',282),
  ('funcioneshash -> hlength','funcioneshash',1,'p_funcioneshash','sintactico.py',288),
  ('funcioneshash -> haskey','funcioneshash',1,'p_funcioneshash','sintactico.py',289),
  ('funcioneshash -> hkeys','funcioneshash',1,'p_funcioneshash','sintactico.py',290),
  ('funcioneshash -> hvalues','funcioneshash',1,'p_funcioneshash','sintactico.py',291),
  ('hlength -> hashf PUNTO LENGTH LPAREN RPAREN','hlength',5,'p_hlength','sintactico.py',297),
  ('haskey -> hashf HASKEY INTERROGACION LPAREN clave RPAREN','haskey',6,'p_haskey','sintactico.py',314),
  ('hkeys -> hashf PUNTO KEY','hkeys',3,'p_hkeys','sintactico.py',323),
  ('hvalues -> hashf PUNTO VALUES','hvalues',3,'p_hvalues','sintactico.py',329),
  ('clave -> STRING','clave',1,'p_clave','sintactico.py',335),
  ('clave -> VARIABLE','clave',1,'p_clave','sintactico.py',336),
  ('clave -> NUMBER','clave',1,'p_clave','sintactico.py',337),
  ('clave -> NUMBER PUNTO NUMBER','clave',3,'p_clave','sintactico.py',338),
  ('value -> NUMBER','value',1,'p_value','sintactico.py',341),
  ('value -> VARIABLE','value',1,'p_value','sintactico.py',342),
  ('value -> STRING','value',1,'p_value','sintactico.py',343),
  ('value -> boolean','value',1,'p_value','sintactico.py',344),
  ('value -> NUMBER PUNTO NUMBER','value',3,'p_value','sintactico.py',345),
]
